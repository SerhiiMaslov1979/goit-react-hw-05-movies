{"version":3,"file":"static/js/247.e301ba57.chunk.js","mappings":"oPA0DA,UArDa,WACX,OAAkCA,EAAAA,EAAAA,WAAS,GAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACA,GAA0BF,EAAAA,EAAAA,UAAS,MAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAAwBJ,EAAAA,EAAAA,UAAS,IAAjC,eAAOK,EAAP,KAAaC,EAAb,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAkBR,OAhBAE,EAAAA,EAAAA,YAAU,YACR,iBAAC,oGAEGP,GAAa,GACbE,EAAS,MAHZ,UAKsBM,EAAAA,EAAAA,IAAiBH,GALvC,OAKSI,EALT,OAMGL,EAAQK,GANX,gDAQGC,QAAQC,IAAI,KAAMC,SARrB,yBAUGZ,GAAa,GAVhB,2EAAD,EAaD,GAAE,CAACK,KAGF,gCACGN,IAAa,SAAC,IAAD,IACbE,IAAUF,GAA6B,IAAhBI,EAAKU,SAC3B,6DACC,KACDZ,IAAUF,GAAaI,EAAKU,OAAS,GACrC,wBACGV,EAAKW,KAAI,SAAAX,GAAI,OACZ,2BACE,gBACEY,IACM,OAAJZ,QAAI,IAAJA,GAAAA,EAAMa,aAAN,8CACoCb,QADpC,IACoCA,OADpC,EACoCA,EAAMa,cACtCC,EAENC,IAAKf,EAAKgB,MAAQhB,EAAKiB,cACvBC,MAAM,SAER,yBAAIlB,EAAKgB,MAAQhB,EAAKiB,cAAtB,QACK,OAAJjB,QAAI,IAAJA,OAAA,EAAAA,EAAMmB,aAAa,8BAAInB,QAAJ,IAAIA,OAAJ,EAAIA,EAAMmB,cAXvBnB,EAAKoB,GADF,OAiBhB,oEAIP,C,8ECtDYC,E,QAAiBC,GAAAA,IAAH,8O,4BCc3B,EAZe,WACb,OACE,SAACD,EAAD,WACE,SAAC,IAAD,CACEE,MAAM,UACNC,KAAM,IACNC,IAAK,CAAEC,SAAU,WAAYC,IAAK,MAAOC,KAAM,UAItD,C,mMCZKC,EAAS,mCAIR,SAAeC,IAAtB,+B,aAAO,O,oBAAA,+GAEoBC,EAAAA,EAAAA,IAAA,kEACsCF,EADtC,yBAFpB,uBAEKvB,EAFL,EAEKA,KAFL,kBAKIA,GALJ,gCAOHC,QAAQC,IAAI,UAAZ,MAPG,gFAYA,SAAewB,EAAtB,kC,aAAO,O,oBAAA,WAA+BC,GAA/B,kGAEoBF,EAAAA,EAAAA,IAAA,4DACgCF,EADhC,kBACgDI,EADhD,gCAFpB,uBAEK3B,EAFL,EAEKA,KAFL,kBAKIA,GALJ,gCAOHC,QAAQC,IAAI,UAAZ,MAPG,gFAaA,SAAe0B,EAAtB,kC,aAAO,O,oBAAA,WAA+BhC,GAA/B,kGAEoB6B,EAAAA,EAAAA,IAAA,6CACiB7B,EADjB,oBACoC2B,EADpC,oBAFpB,uBAEKvB,EAFL,EAEKA,KAFL,kBAMIA,GANJ,gCAQHC,QAAQC,IAAI,UAAZ,MARG,gFAcA,IAAMH,EAAgB,mCAAG,WAAMH,GAAN,kGAEL6B,EAAAA,EAAAA,IAAA,6CACiB7B,EADjB,4BAC4C2B,IAHvC,uBAEpBvB,EAFoB,EAEpBA,KAFoB,kBAMrBA,EAAKN,MANgB,gCAQ5BO,QAAQC,IAAI,UAAZ,MAR4B,yDAAH,sDAchB2B,EAAgB,mCAAG,WAAMjC,GAAN,kGAEL6B,EAAAA,EAAAA,IAAA,6CACiB7B,EADjB,4BAC4C2B,IAHvC,uBAEpBvB,EAFoB,EAEpBA,KAFoB,kBAKrBA,EAAK8B,SALgB,gCAO5B7B,QAAQC,IAAI,UAAZ,MAP4B,yDAAH,qD","sources":["components/Cast/Cast.jsx","components/Loader/Loader.styled.jsx","components/Loader/Loader.jsx","servise/api.js"],"sourcesContent":["import Loader from 'components/Loader/Loader';\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getMoviesCredits } from '../../servise/api';\nimport NoPoster from '../Image/sorry-image-not-available.jpg';\nconst Cast = () => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [cast, setCast] = useState([]);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    (async () => {\n      try {\n        setIsLoading(true);\n        setError(null);\n\n        const data = await getMoviesCredits(movieId);\n        setCast(data);\n      } catch (error) {\n        console.log(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    })();\n  }, [movieId]);\n\n  return (\n    <>\n      {isLoading && <Loader />}\n      {error && !isLoading && cast.length === 0 && (\n        <h2>Try again. Something went wrong!</h2>\n      )}{' '}\n      {!error && !isLoading && cast.length > 0 ? (\n        <ul>\n          {cast.map(cast => (\n            <li key={cast.id}>\n              <img\n                src={\n                  cast?.profile_path\n                    ? `https://tmdb.org/t/p/original${cast?.profile_path}`\n                    : NoPoster\n                }\n                alt={cast.name || cast.original_name}\n                width=\"200\"\n              />\n              <p>{cast.name || cast.original_name} </p>\n              {cast?.character && <p>{cast?.character}</p>}\n            </li>\n          ))}\n        </ul>\n      ) : (\n        <h2>We don't have any cast for this movie</h2>\n      )}\n    </>\n  );\n};\n\nexport default Cast;\n","import styled from 'styled-components';\n\nexport const LoaderBackdrop = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  z-index: 1;\n\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  width: 100vw;\n  height: 100vh;\n  background-color: rgba(185, 228, 201, 0.2);\n`;\n","import React from 'react';\nimport { LoaderBackdrop } from './Loader.styled';\nimport ScaleLoader from 'react-spinners/ScaleLoader';\n\nconst Loader = () => {\n  return (\n    <LoaderBackdrop>\n      <ScaleLoader\n        color=\"#36d7b7\"\n        size={150}\n        css={{ position: 'absolute', top: '25%', left: '45%' }}\n      />\n    </LoaderBackdrop>\n  );\n};\n\nexport default Loader;\n","import axios from 'axios';\n\nconst apiKey = 'a7b06e7a05ba5e2eb883b74f2a4c575a';\n\n//trending/get-trending список найпопулярніших фільмів на сьогодні для створення колекції на головній сторінці.\n\nexport async function getTrendingMovies() {\n  try {\n    const { data } = await axios.get(\n      `https://api.themoviedb.org/3/trending/movie/day?api_key=${apiKey}&include_adult=false`\n    );\n    return data;\n  } catch (error) {\n    console.log('Error: ', error);\n  }\n}\n//search/search-movies пошук фільму за ключовим словом на сторінці фільмів.\n\nexport async function getMovieByQuery(query) {\n  try {\n    const { data } = await axios.get(\n      `https://api.themoviedb.org/3/search/movie?api_key=${apiKey}&query=${query}&page=1&include_adult=false`\n    );\n    return data;\n  } catch (error) {\n    console.log('Error: ', error);\n  }\n}\n\n//movies/get-movie-details запит повної інформації про фільм для сторінки кінофільму.\n\nexport async function getMovieDetails(movieId) {\n  try {\n    const { data } = await axios.get(\n      `https://api.themoviedb.org/3/movie/${movieId}?api_key=${apiKey}&language=en-US`\n    );\n\n    return data;\n  } catch (error) {\n    console.log('Error: ', error);\n  }\n}\n\n//movies/get-movie-credits запит інформації про акторський склад для сторінки кінофільму.\n\nexport const getMoviesCredits = async movieId => {\n  try {\n    const { data } = await axios.get(\n      `https://api.themoviedb.org/3/movie/${movieId}/credits?api_key=${apiKey}`\n    );\n    // console.log(data.cast);\n    return data.cast;\n  } catch (error) {\n    console.log('Error: ', error);\n  }\n};\n\n//movies/get-movie-reviews запит оглядів для сторінки кінофільму.\n\nexport const getMoviesReviews = async movieId => {\n  try {\n    const { data } = await axios.get(\n      `https://api.themoviedb.org/3/movie/${movieId}/reviews?api_key=${apiKey}`\n    );\n    return data.results;\n  } catch (error) {\n    console.log('Error: ', error);\n  }\n};\n"],"names":["useState","isLoading","setIsLoading","error","setError","cast","setCast","movieId","useParams","useEffect","getMoviesCredits","data","console","log","message","length","map","src","profile_path","NoPoster","alt","name","original_name","width","character","id","LoaderBackdrop","styled","color","size","css","position","top","left","apiKey","getTrendingMovies","axios","getMovieByQuery","query","getMovieDetails","getMoviesReviews","results"],"sourceRoot":""}